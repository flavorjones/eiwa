require_relative "entity"

module Eiwa
  class TranslatesCodeToEntity
    def call(code)
      if (entity = KNOWN_ENTITIES[code])
        entity
      else
        raise Eiwa::Error.new("Unknown entity #{code}. Maybe JMdict added new ones?")
      end
    end

    KNOWN_ENTITIES = {
      "MA" => Entity.new(code: "MA", text: "martial arts term"),
      "X" => Entity.new(code: "X", text: "rude or X-rated term (not displayed in educational software)"),
      "abbr" => Entity.new(code: "abbr", text: "abbreviation"),
      "adj-i" => Entity.new(code: "adj-i", text: "adjective (keiyoushi)"),
      "adj-ix" => Entity.new(code: "adj-ix", text: "adjective (keiyoushi) - yoi/ii class"),
      "adj-na" => Entity.new(code: "adj-na", text: "adjectival nouns or quasi-adjectives (keiyodoshi)"),
      "adj-no" => Entity.new(code: "adj-no", text: "nouns which may take the genitive case particle `no'"),
      "adj-pn" => Entity.new(code: "adj-pn", text: "pre-noun adjectival (rentaishi)"),
      "adj-t" => Entity.new(code: "adj-t", text: "`taru' adjective"),
      "adj-f" => Entity.new(code: "adj-f", text: "noun or verb acting prenominally"),
      "adv" => Entity.new(code: "adv", text: "adverb (fukushi)"),
      "adv-to" => Entity.new(code: "adv-to", text: "adverb taking the `to' particle"),
      "arch" => Entity.new(code: "arch", text: "archaism"),
      "ateji" => Entity.new(code: "ateji", text: "ateji (phonetic) reading"),
      "aux" => Entity.new(code: "aux", text: "auxiliary"),
      "aux-v" => Entity.new(code: "aux-v", text: "auxiliary verb"),
      "aux-adj" => Entity.new(code: "aux-adj", text: "auxiliary adjective"),
      "Buddh" => Entity.new(code: "Buddh", text: "Buddhist term"),
      "chem" => Entity.new(code: "chem", text: "chemistry term"),
      "chn" => Entity.new(code: "chn", text: "children's language"),
      "col" => Entity.new(code: "col", text: "colloquialism"),
      "comp" => Entity.new(code: "comp", text: "computer terminology"),
      "conj" => Entity.new(code: "conj", text: "conjunction"),
      "cop-da" => Entity.new(code: "cop-da", text: "copula"),
      "ctr" => Entity.new(code: "ctr", text: "counter"),
      "derog" => Entity.new(code: "derog", text: "derogatory"),
      "eK" => Entity.new(code: "eK", text: "exclusively kanji"),
      "ek" => Entity.new(code: "ek", text: "exclusively kana"),
      "exp" => Entity.new(code: "exp", text: "expressions (phrases, clauses, etc.)"),
      "fam" => Entity.new(code: "fam", text: "familiar language"),
      "fem" => Entity.new(code: "fem", text: "female term or language"),
      "food" => Entity.new(code: "food", text: "food term"),
      "geom" => Entity.new(code: "geom", text: "geometry term"),
      "gikun" => Entity.new(code: "gikun", text: "gikun (meaning as reading) or jukujikun (special kanji reading)"),
      "hon" => Entity.new(code: "hon", text: "honorific or respectful (sonkeigo) language"),
      "hum" => Entity.new(code: "hum", text: "humble (kenjougo) language"),
      "iK" => Entity.new(code: "iK", text: "word containing irregular kanji usage"),
      "id" => Entity.new(code: "id", text: "idiomatic expression"),
      "ik" => Entity.new(code: "ik", text: "word containing irregular kana usage"),
      "int" => Entity.new(code: "int", text: "interjection (kandoushi)"),
      "io" => Entity.new(code: "io", text: "irregular okurigana usage"),
      "iv" => Entity.new(code: "iv", text: "irregular verb"),
      "ling" => Entity.new(code: "ling", text: "linguistics terminology"),
      "m-sl" => Entity.new(code: "m-sl", text: "manga slang"),
      "male" => Entity.new(code: "male", text: "male term or language"),
      "male-sl" => Entity.new(code: "male-sl", text: "male slang"),
      "math" => Entity.new(code: "math", text: "mathematics"),
      "mil" => Entity.new(code: "mil", text: "military"),
      "n" => Entity.new(code: "n", text: "noun (common) (futsuumeishi)"),
      "n-adv" => Entity.new(code: "n-adv", text: "adverbial noun (fukushitekimeishi)"),
      "n-suf" => Entity.new(code: "n-suf", text: "noun, used as a suffix"),
      "n-pref" => Entity.new(code: "n-pref", text: "noun, used as a prefix"),
      "n-t" => Entity.new(code: "n-t", text: "noun (temporal) (jisoumeishi)"),
      "num" => Entity.new(code: "num", text: "numeric"),
      "oK" => Entity.new(code: "oK", text: "word containing out-dated kanji"),
      "obs" => Entity.new(code: "obs", text: "obsolete term"),
      "obsc" => Entity.new(code: "obsc", text: "obscure term"),
      "ok" => Entity.new(code: "ok", text: "out-dated or obsolete kana usage"),
      "oik" => Entity.new(code: "oik", text: "old or irregular kana form"),
      "on-mim" => Entity.new(code: "on-mim", text: "onomatopoeic or mimetic word"),
      "pn" => Entity.new(code: "pn", text: "pronoun"),
      "poet" => Entity.new(code: "poet", text: "poetical term"),
      "pol" => Entity.new(code: "pol", text: "polite (teineigo) language"),
      "pref" => Entity.new(code: "pref", text: "prefix"),
      "proverb" => Entity.new(code: "proverb", text: "proverb"),
      "prt" => Entity.new(code: "prt", text: "particle"),
      "physics" => Entity.new(code: "physics", text: "physics terminology"),
      "quote" => Entity.new(code: "quote", text: "quotation"),
      "rare" => Entity.new(code: "rare", text: "rare"),
      "sens" => Entity.new(code: "sens", text: "sensitive"),
      "sl" => Entity.new(code: "sl", text: "slang"),
      "suf" => Entity.new(code: "suf", text: "suffix"),
      "uK" => Entity.new(code: "uK", text: "word usually written using kanji alone"),
      "uk" => Entity.new(code: "uk", text: "word usually written using kana alone"),
      "unc" => Entity.new(code: "unc", text: "unclassified"),
      "yoji" => Entity.new(code: "yoji", text: "yojijukugo"),
      "v1" => Entity.new(code: "v1", text: "Ichidan verb"),
      "v1-s" => Entity.new(code: "v1-s", text: "Ichidan verb - kureru special class"),
      "v2a-s" => Entity.new(code: "v2a-s", text: "Nidan verb with 'u' ending (archaic)"),
      "v4h" => Entity.new(code: "v4h", text: "Yodan verb with `hu/fu' ending (archaic)"),
      "v4r" => Entity.new(code: "v4r", text: "Yodan verb with `ru' ending (archaic)"),
      "v5aru" => Entity.new(code: "v5aru", text: "Godan verb - -aru special class"),
      "v5b" => Entity.new(code: "v5b", text: "Godan verb with `bu' ending"),
      "v5g" => Entity.new(code: "v5g", text: "Godan verb with `gu' ending"),
      "v5k" => Entity.new(code: "v5k", text: "Godan verb with `ku' ending"),
      "v5k-s" => Entity.new(code: "v5k-s", text: "Godan verb - Iku/Yuku special class"),
      "v5m" => Entity.new(code: "v5m", text: "Godan verb with `mu' ending"),
      "v5n" => Entity.new(code: "v5n", text: "Godan verb with `nu' ending"),
      "v5r" => Entity.new(code: "v5r", text: "Godan verb with `ru' ending"),
      "v5r-i" => Entity.new(code: "v5r-i", text: "Godan verb with `ru' ending (irregular verb)"),
      "v5s" => Entity.new(code: "v5s", text: "Godan verb with `su' ending"),
      "v5t" => Entity.new(code: "v5t", text: "Godan verb with `tsu' ending"),
      "v5u" => Entity.new(code: "v5u", text: "Godan verb with `u' ending"),
      "v5u-s" => Entity.new(code: "v5u-s", text: "Godan verb with `u' ending (special class)"),
      "v5uru" => Entity.new(code: "v5uru", text: "Godan verb - Uru old class verb (old form of Eru)"),
      "vz" => Entity.new(code: "vz", text: "Ichidan verb - zuru verb (alternative form of -jiru verbs)"),
      "vi" => Entity.new(code: "vi", text: "intransitive verb"),
      "vk" => Entity.new(code: "vk", text: "Kuru verb - special class"),
      "vn" => Entity.new(code: "vn", text: "irregular nu verb"),
      "vr" => Entity.new(code: "vr", text: "irregular ru verb, plain form ends with -ri"),
      "vs" => Entity.new(code: "vs", text: "noun or participle which takes the aux. verb suru"),
      "vs-c" => Entity.new(code: "vs-c", text: "su verb - precursor to the modern suru"),
      "vs-s" => Entity.new(code: "vs-s", text: "suru verb - special class"),
      "vs-i" => Entity.new(code: "vs-i", text: "suru verb - included"),
      "kyb" => Entity.new(code: "kyb", text: "Kyoto-ben"),
      "osb" => Entity.new(code: "osb", text: "Osaka-ben"),
      "ksb" => Entity.new(code: "ksb", text: "Kansai-ben"),
      "ktb" => Entity.new(code: "ktb", text: "Kantou-ben"),
      "tsb" => Entity.new(code: "tsb", text: "Tosa-ben"),
      "thb" => Entity.new(code: "thb", text: "Touhoku-ben"),
      "tsug" => Entity.new(code: "tsug", text: "Tsugaru-ben"),
      "kyu" => Entity.new(code: "kyu", text: "Kyuushuu-ben"),
      "rkb" => Entity.new(code: "rkb", text: "Ryuukyuu-ben"),
      "nab" => Entity.new(code: "nab", text: "Nagano-ben"),
      "hob" => Entity.new(code: "hob", text: "Hokkaido-ben"),
      "vt" => Entity.new(code: "vt", text: "transitive verb"),
      "vulg" => Entity.new(code: "vulg", text: "vulgar expression or word"),
      "adj-kari" => Entity.new(code: "adj-kari", text: "`kari' adjective (archaic)"),
      "adj-ku" => Entity.new(code: "adj-ku", text: "`ku' adjective (archaic)"),
      "adj-shiku" => Entity.new(code: "adj-shiku", text: "`shiku' adjective (archaic)"),
      "adj-nari" => Entity.new(code: "adj-nari", text: "archaic/formal form of na-adjective"),
      "n-pr" => Entity.new(code: "n-pr", text: "proper noun"),
      "v-unspec" => Entity.new(code: "v-unspec", text: "verb unspecified"),
      "v4k" => Entity.new(code: "v4k", text: "Yodan verb with `ku' ending (archaic)"),
      "v4g" => Entity.new(code: "v4g", text: "Yodan verb with `gu' ending (archaic)"),
      "v4s" => Entity.new(code: "v4s", text: "Yodan verb with `su' ending (archaic)"),
      "v4t" => Entity.new(code: "v4t", text: "Yodan verb with `tsu' ending (archaic)"),
      "v4n" => Entity.new(code: "v4n", text: "Yodan verb with `nu' ending (archaic)"),
      "v4b" => Entity.new(code: "v4b", text: "Yodan verb with `bu' ending (archaic)"),
      "v4m" => Entity.new(code: "v4m", text: "Yodan verb with `mu' ending (archaic)"),
      "v2k-k" => Entity.new(code: "v2k-k", text: "Nidan verb (upper class) with `ku' ending (archaic)"),
      "v2g-k" => Entity.new(code: "v2g-k", text: "Nidan verb (upper class) with `gu' ending (archaic)"),
      "v2t-k" => Entity.new(code: "v2t-k", text: "Nidan verb (upper class) with `tsu' ending (archaic)"),
      "v2d-k" => Entity.new(code: "v2d-k", text: "Nidan verb (upper class) with `dzu' ending (archaic)"),
      "v2h-k" => Entity.new(code: "v2h-k", text: "Nidan verb (upper class) with `hu/fu' ending (archaic)"),
      "v2b-k" => Entity.new(code: "v2b-k", text: "Nidan verb (upper class) with `bu' ending (archaic)"),
      "v2m-k" => Entity.new(code: "v2m-k", text: "Nidan verb (upper class) with `mu' ending (archaic)"),
      "v2y-k" => Entity.new(code: "v2y-k", text: "Nidan verb (upper class) with `yu' ending (archaic)"),
      "v2r-k" => Entity.new(code: "v2r-k", text: "Nidan verb (upper class) with `ru' ending (archaic)"),
      "v2k-s" => Entity.new(code: "v2k-s", text: "Nidan verb (lower class) with `ku' ending (archaic)"),
      "v2g-s" => Entity.new(code: "v2g-s", text: "Nidan verb (lower class) with `gu' ending (archaic)"),
      "v2s-s" => Entity.new(code: "v2s-s", text: "Nidan verb (lower class) with `su' ending (archaic)"),
      "v2z-s" => Entity.new(code: "v2z-s", text: "Nidan verb (lower class) with `zu' ending (archaic)"),
      "v2t-s" => Entity.new(code: "v2t-s", text: "Nidan verb (lower class) with `tsu' ending (archaic)"),
      "v2d-s" => Entity.new(code: "v2d-s", text: "Nidan verb (lower class) with `dzu' ending (archaic)"),
      "v2n-s" => Entity.new(code: "v2n-s", text: "Nidan verb (lower class) with `nu' ending (archaic)"),
      "v2h-s" => Entity.new(code: "v2h-s", text: "Nidan verb (lower class) with `hu/fu' ending (archaic)"),
      "v2b-s" => Entity.new(code: "v2b-s", text: "Nidan verb (lower class) with `bu' ending (archaic)"),
      "v2m-s" => Entity.new(code: "v2m-s", text: "Nidan verb (lower class) with `mu' ending (archaic)"),
      "v2y-s" => Entity.new(code: "v2y-s", text: "Nidan verb (lower class) with `yu' ending (archaic)"),
      "v2r-s" => Entity.new(code: "v2r-s", text: "Nidan verb (lower class) with `ru' ending (archaic)"),
      "v2w-s" => Entity.new(code: "v2w-s", text: "Nidan verb (lower class) with `u' ending and `we' conjugation (archaic)"),
      "archit" => Entity.new(code: "archit", text: "architecture term"),
      "astron" => Entity.new(code: "astron", text: "astronomy, etc. term"),
      "baseb" => Entity.new(code: "baseb", text: "baseball term"),
      "biol" => Entity.new(code: "biol", text: "biology term"),
      "bot" => Entity.new(code: "bot", text: "botany term"),
      "bus" => Entity.new(code: "bus", text: "business term"),
      "econ" => Entity.new(code: "econ", text: "economics term"),
      "engr" => Entity.new(code: "engr", text: "engineering term"),
      "finc" => Entity.new(code: "finc", text: "finance term"),
      "geol" => Entity.new(code: "geol", text: "geology, etc. term"),
      "law" => Entity.new(code: "law", text: "law, etc. term"),
      "mahj" => Entity.new(code: "mahj", text: "mahjong term"),
      "med" => Entity.new(code: "med", text: "medicine, etc. term"),
      "music" => Entity.new(code: "music", text: "music term"),
      "Shinto" => Entity.new(code: "Shinto", text: "Shinto term"),
      "shogi" => Entity.new(code: "shogi", text: "shogi term"),
      "sports" => Entity.new(code: "sports", text: "sports term"),
      "sumo" => Entity.new(code: "sumo", text: "sumo term"),
      "zool" => Entity.new(code: "zool", text: "zoology term"),
      "joc" => Entity.new(code: "joc", text: "jocular, humorous term"),
      "anat" => Entity.new(code: "anat", text: "anatomical term"),
    }
  end
end
